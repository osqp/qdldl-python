name: Build wheels

on: [push, pull_request]

jobs:
  build_sdist:
    name: Build source
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@master
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v5
      name: Install Python
      with:
        python-version: '3.12'

    - name: Build source
      run: |
        python -m pip install build
        python -m build --sdist --outdir=wheelhouse

    - name: Upload sdist to github
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: wheelhouse/*.tar.gz
        if-no-files-found: error

  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Include macos-13 to get Intel x86_64 macs and maos-latest to get the Aaarch64 macs
        os: [ubuntu-latest, macos-latest, macos-13, windows-2022]

        # Build on the native architectures (macos-latest is arm64. macos-13 is x86_64)
        include:
        - os: macos-latest
          osx_arch: 'arm64'
        - os: macos-13
          osx_arch: 'x86_64'
    steps:
    - uses: actions/checkout@master
      with:
        submodules: 'recursive'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      if: startsWith(matrix.os,'windows')

    - name: Add Windows SDK
      shell: cmd
      if: startsWith(matrix.os,'windows')
      run: |
        choco install windows-sdk-8.1

    - uses: actions/setup-python@v5
      name: Install Python
      with:
        python-version: '3.12'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_BUILD: "cp3*"
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
        CIBW_MANYLINUX_X86_64_IMAGE: "dockcross/manylinux2014-x64"
        CIBW_TEST_REQUIRES: "pytest"
        CIBW_TEST_COMMAND: "pytest {project}/tests"
        # Skip testing on arm64 Python 3.8 because it uses the x86_64 executable, not the arm executable
        CIBW_TEST_SKIP: "cp38-macosx_*:arm64"
        # Clean the build directory between builds
        CIBW_BEFORE_BUILD: >-
          rm -rf {package}/c/build
        CIBW_ENVIRONMENT_LINUX: CMAKE_GENERATOR="Unix Makefiles"
        CIBW_ENVIRONMENT_MACOS: CMAKE_GENERATOR="Unix Makefiles" CMAKE_OSX_ARCHITECTURES=${{ matrix.osx_arch }}
        CIBW_ENVIRONMENT_WINDOWS: CMAKE_GENERATOR="Visual Studio 17 2022" CMAKE_GENERATOR_PLATFORM=x64
        CIBW_BUILD_VERBOSITY: 1

    - name: Upload artifacts to github
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl
        if-no-files-found: error

  publish_to_pypi:
    name: Publish wheels to PyPi
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: wheelhouse
          merge-multiple: true

      - name: Print out packages
        run: ls wheelhouse

      - name: Upload wheels to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          python -m pip install --upgrade twine
          twine upload wheelhouse/*
